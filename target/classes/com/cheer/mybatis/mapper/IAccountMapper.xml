<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cheer.mybatis.mapper.IAccountMapper">
  <resultMap id="BaseResultMap" type="com.cheer.mybatis.model.IAccount">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="account_name" jdbcType="VARCHAR" property="accountName" />
    <result column="account_password" jdbcType="VARCHAR" property="accountPassword" />
    <result column="empno" jdbcType="VARCHAR" property="empno" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="version" jdbcType="INTEGER" property="version" />
  </resultMap>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from i_account
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  
  <insert id="insert" parameterType="com.cheer.mybatis.model.IAccount" useGeneratedKeys="true"
  	keyProperty="id">
    	insert into i_account (account_name,account_password,empno,created_by,created_time) values
		(#{accountName},#{accountPassword},#{empno},#{createdBy},#{createdTimeAsStr});
  </insert>
  
  
  <update id="updateByPrimaryKey" parameterType="com.cheer.mybatis.model.IAccount">
    update i_account set account_password=#{accountPassword},empno=#{empno},update_by=#{updateBy},update_time=now(),
  	version=version+1 where id=#{id}
  </update>
  
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, account_name, account_password, empno, created_time, created_by, update_time, 
    update_by, version
    from i_account
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap">
    select id, account_name, account_password, empno, created_time, created_by, update_time, 
    update_by, version
    from i_account
  </select>
  
  <select id="queryAccounts" parameterType="com.cheer.mybatis.model.IAccount" resultMap="BaseResultMap">
  	select id,account_name,account_password,empno,created_by,created_time,update_by,update_time
  	,version from i_account
  	<where>
  		<if test="id!=null and id!='' ">
  			and id=#{id}
  		</if>
  		<if test="accountName != null and accountName != '' ">
  			and account_name = #{accountName}
  		</if>
  	</where>
  </select>
  
  <!-- 根据员工号查询，防止重复 -->
  <select id="queryAccountsByEmpno" parameterType="com.cheer.mybatis.model.IAccount" resultMap="BaseResultMap">
  	select id,account_name,account_password,empno,created_by,created_time,update_by,update_time
  	,version from i_account
  	where 
  	empno = #{empno}
  </select>
  
	<select id="queryIAccountInPage" resultMap="BaseResultMap">
		select id,account_name,empno,created_by,created_time,update_by,update_time from i_account
		 <where>
		 	<if test="iAccount.accountName != null and iAccount.accountName != ''">
		 		account_name like concat('%',#{iAccount.accountName},'%')
		 	</if>
		 	<if test="iAccount.empno != null and iAccount.empno != ''">
			 	and empno like concat('%',#{iAccount.empno},'%')
		 	</if>
		 </where>
		  limit #{start},#{quantity}
	</select>
	
	<select id="countIAccount" resultType="java.lang.Long">
		select count(id) count from i_account
		 <where>
		 	<if test="accountName != null and accountName != ''">
		 		account_name like concat('%',#{accountName},'%')
		 	</if>
		 	<if test="empno != null and empno != ''">
			 	and empno like concat('%',#{empno},'%')
		 	</if>
		 </where>
	</select>
  
  <cache eviction="LRU" size="1024">
  </cache>
</mapper>